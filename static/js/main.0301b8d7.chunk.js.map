{"version":3,"sources":["CreditCard.js","App.js","serviceWorker.js","index.js"],"names":["CreditCard","state","name","number","date","n","this","setState","target","value","c","d","class","className","src","padEnd","replace","toUpperCase","type","maxLength","placeholder","onChange","nameChange","bind","numberChange","dateChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPA4CeA,E,2MAzCXC,MAAQ,CACJC,KAAM,aACNC,OAAQ,YACRC,KAAM,Q,0EAECC,GACPC,KAAKC,SAAS,CACVL,KAAMG,EAAEG,OAAOC,U,mCAGVC,GACTJ,KAAKC,SAAS,CACVJ,OAAQO,EAAEF,OAAOC,U,iCAGdE,GACPL,KAAKC,SAAS,CACVH,KAAMO,EAAEH,OAAOC,U,+BAInB,OACI,yBAAKG,MAAM,SACP,yBAAKA,MAAM,QACP,wBAAIC,UAAU,YAAd,cACA,yBAAKA,UAAU,WAAWC,IAAI,8FAC9B,yBAAKD,UAAU,cAAcP,KAAKL,MAAME,OAAOY,OAAO,GAAI,KAAKC,QAAQ,UAAW,QAClF,yBAAKH,UAAU,kBAAkBP,KAAKL,MAAMG,KAAKW,OAAO,EAAG,KAAKC,QAAQ,SAAU,UAClF,yBAAKH,UAAU,aAAaP,KAAKL,MAAMC,KAAKe,eAC5C,yBAAKJ,UAAU,WACXC,IAAI,kHAEZ,yBAAKD,UAAU,cACX,2BAAOK,KAAK,OAAOC,UAAU,KAAKC,YAAY,eAAeC,SAAUf,KAAKgB,WAAWC,KAAKjB,QAC5F,2BAAOY,KAAK,OAAOC,UAAU,KAAKC,YAAY,gBAAgBC,SAAUf,KAAKkB,aAAaD,KAAKjB,QAC/F,2BAAOY,KAAK,OAAOC,UAAU,IAAIC,YAAY,kBAAkBC,SAAUf,KAAKmB,WAAWF,KAAKjB,c,GApCzFoB,a,YCWVC,MARf,WACE,OACA,yBAAKd,UAAU,aACf,kBAAC,EAAD,QCIkBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0301b8d7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass CreditCard extends Component {\r\n    state = {\r\n        name: 'Eren Yager',\r\n        number: '123456789',\r\n        date: '1123',\r\n    };\r\n    nameChange(n) {\r\n        this.setState({\r\n            name: n.target.value\r\n        });\r\n    }\r\n    numberChange(c) {\r\n        this.setState({\r\n            number: c.target.value\r\n        });\r\n    }\r\n    dateChange(d) {\r\n        this.setState({\r\n            date: d.target.value\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div class=\"panel\">\r\n                <div class=\"card\">\r\n                    <h2 className='cardName'>Free Money</h2>\r\n                    <img className='cardChip' src='https://cdn.iconscout.com/icon/premium/png-512-thumb/credit-card-chip-1522262-1288452.png' />\r\n                    <div className=\"cardNumber\">{this.state.number.padEnd(16, '*').replace(/(.{4})/g, \"$1 \")}</div>\r\n                    <div className=\"cardExpiryDate\">{this.state.date.padEnd(4, '*').replace(/(.{2})/, \"$1 / \")}</div>\r\n                    <div className=\"cardOwner\">{this.state.name.toUpperCase()}</div>\r\n                    <img className=\"cardLogo\"\r\n                        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/MasterCard_Logo.svg/1200px-MasterCard_Logo.svg.png\" />\r\n                </div>\r\n                <div className=\"creditForm\">\r\n                    <input type=\"text\" maxLength=\"20\" placeholder=\"Owner's Name\" onChange={this.nameChange.bind(this)} />\r\n                    <input type=\"text\" maxLength=\"16\" placeholder=\"Card's Number\" onChange={this.numberChange.bind(this)} />\r\n                    <input type=\"text\" maxLength=\"4\" placeholder=\"Expiration Date\" onChange={this.dateChange.bind(this)} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default CreditCard;","import React from 'react';\nimport CreditCard from './CreditCard';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n  <div className='container'>\n  <CreditCard/>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}